{
  "name": "pasta",
  "version": "0.0.0",
  "main": "Pasta.js",
  "ignore": [
    "**/.*",
    "node_modules",
    "components"
  ],
  "dependencies": {
    "underscore": "~1.4.4",
    "underscore-fix": "git://github.com/ympbyc/underscore-fix.git"
  },
  "gitHead": "40abca8778b61ccf7e998bf55208114a8adbd341",
  "readme": "Pasta\n=====\n\n**Meta Application Function**\n\n2012 Minori Yamashita <ympbyc@gmail.com>\n\n> Pasta is a function that helps you write JavaScript MVC applications functionally.\n\nDependencies\n------------\n\nUnderscore, Underscore-fix\n\n\nAPI\n---\n\n### Pasta/4\n\nPasta takes all it needs to setup an application for you and returns a function called `signal`.\n\n```javascript\nPasta(Model, UI, View, initialData); //=> signal\n```\n\n### signal/1, signal/2\n\n`Pasta()` produces a function named `signal`. `signal()` produces a function that will call a function in your model.\n\n```javascript\n$(\"button\").click(pasta.signal(\"some_function_name\", function (ev) {\n  return \"data\";\n}));\n```\n\nDOCS\n----\n\n[See Documentation](http://ympbyc.github.io/Pasta/web/#mvc)\n\nPasta\n-----\n\n### models time correctly ###\n\nPasta's state management model is heavily influenced by that of [Clojure's](http://clojure.org/state). There is no data mutated throughout the execution.\n\n### is capable of handling meta-applications ###\n\nPasta is a great tool to avoid pieces of uncontrolled states scattered all over your app.\nIf your app is made up of hundreds of mutable objects, it is rather cumbersome to gather them all and inspect or save the state of the app while it is running.\nMeanwhile, Pasta forces every changeable data to be put into one big hashmap, allowing us to inspect, save, load, metaprogram the app.\n\n### is platform independent ###\n\nPasta does not assume a particular platform where it is used. You can use Pasta in any JavaScript environment with any GUI APIs.\n\n### is not object oriented ###\n\nThis is very important. Pasta does not mix data and behaviours. models and views are collections only of functions,\nand the state is a collection only of data. With Pasta, it is highly possible to create apps that do not contain a single `this` keyword.\n\nYou could of course use your favourite data structure to put into the state or use OO libraries for UI manipulations, but it is not the concern of Pasta.\n\n\nTips\n----\n\nThe state of a Pasta app can be persisted into localstorage, remote server or anywhere you can think of. Just serialize it into JSON and save.\n\nHere goes a crazy tip: you can save the state into the state itself! If you know what I mean...\n\n```javascript\nvar Model = _.module(\n  {},\n\n  function save_history (state) {\n    return {previousState: state};\n  },\n\n  function back-to-the-future (state) {\n    //go back 2 steps\n    return state.previousState.previousState;\n  }\n);\n```\n\n![Back to the future](https://raw.github.com/ympbyc/Pasta/master/assets/img/backtothefuture.jpg)\n\n\nMisc\n----\n\nPasta is licensed under MIT licence\n\n\n\nChange Log\n----------\n\n### 2013/5/22\n\nPasta() now returns the signal function instead of an object.\n",
  "readmeFilename": "README.md",
  "_id": "Pasta@0.1.0",
  "description": "Pasta =====",
  "commit": "40abca8778b61ccf7e998bf55208114a8adbd341",
  "repository": {
    "type": "local-repo",
    "path": "../../"
  }
}