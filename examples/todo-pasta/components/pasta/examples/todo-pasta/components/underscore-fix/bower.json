{
  "name": "underscore-fix",
  "version": "0.0.0",
  "main": "underscore-fix.js",
  "ignore": [
    "**/.*",
    "node_modules",
    "components"
  ],
  "dependencies": {
    "underscore": "~1.4.4"
  },
  "gitHead": "bcba258d6bbaeb5166a81d37ec3941c086e5989d",
  "readme": "Underscore-fix\n==============\n\n2013 Minori Yamashita <ympbyc@gmail.com>\n\nUnderscoreに足りない関数を全部乗せ。\n\nCollection\n----------\n\n### _.conj\n\n```\n{} * {} * ... -> {}\n[] * [] * ... -> []\n[] * a  * ... -> []\n\"\" * \"\" * ... -> \"\"\n```\n\nそれぞれのデータ型にふさわしい合成を行う.\n\n```javascript\n_.conj({a:1, b:2}, {b:3, c:4}, {d:5}); //=> {a:1, b:3, c:4, d:5} //mergeと同じ\n_.conj([1,2,3], [4,5]);                //=> [1,2,3,4,5]          //concatと同じ\n_.conj([1,2,3], 4, 5);                 //=> [1,2,3,4,5]          //concatと同じ\n_.conj(\"hel\", \"lo\", \"!\");              //=> \"hello!\"             //concatと同じ\n```\n\nSequence\n--------\n\nSequenceはStringやargumentsやArrayなど、lengthプロパティを持ったオブジェクト.\n\n### _.slice ###\n\n```\n[a] * Number -> [a]\n[a] * Number * Number -> [a]\n```\n\nシーケンスSを取り、そのsliceメソッドを適用するか、Arrayにキャストしてからsliceメソッドを適用する.\n\n```javascript\n_.slice([1,2,3,4,5], 2); //=> [3,4,5]\n_.slice(\"abcde\", 2, 4); //=> \"cd\"\n_.slice({length: 4, 0:1, 1:2, 2:3, 3:4}, 2,4); //=> [3, 4]\n```\n\n### _.concat ###\n\n```\n[a] * [a] -> [a]\n[a] * a -> [a]\n[a] * a * a -> [a]\n...\n```\n\nシーケンスSを取り、そのconcatメソッドを適用するか、Arrayにキャストしてからconcatメソッドを適用する.\n\n```javascript\n_.concat([1,2,3], 4, 5 6); //=> [1,2,3,4,5,6]\n_.concat([1,2,3], [4,5,6]); //=> [1,2,3,4,5,6]\n```\n\n### _.len ###\n\n```\n[a] -> Number\n```\n\nシーケンスのlengthプロパティを読み出す\n\n```javscript\n_.len([1,2,3]); //=> 3\n_.len(\"abcde\"); //=> 5\n```\n\n\nArray\n-----\n\n### _.join ###\n\n```\n[String] * String -> String\n```\n\n配列のjoinメソッドを呼ぶ.\n\n```javascript\n_.join([\"aaa\", \"bbb\", \"ccc\"], \"~\"); => \"aaa~bbb~ccc\"\n```\n\n### _.splat ###\n\n```\n[a] * Number -> [[a]]\n```\n\n配列Aを数値N個ずつに切り分ける\n\n```javascript\n_.splat([1,2,3,4,5,6,7], 2); //=> [[1,2], [3,4], [5,6], [7]]\n```\n\nObject\n------\n\n### _.merge ###\n\n```\n{} * {} -> {}\n{} * {} * {} -> {}\n...\n```\n\n2つ以上のオブジェクトをマージした新しいオブジェクトを返す. スロット名が衝突した場合、後ろのものが優先される.\n\n```javascript\n_.merge({a:1, b:2, c:3},\n        {c:\"a\", d:\"b\", e:\"f\"},\n        {e: 8});\n\n//=> {a:1, b:2, c:\"a\", d:\"b\", e:8}\n```\n\n### _.mapmap ###\n\n```\n{} -> Function a -> {a}\n```\n\n_.mapは配列を返すが、これはオブジェクトを返す.\n\n```javascript\n_.mapmap({a:1, b:2, c:3}, _['+'](5)); //=> {a:6, b:7, c:8}\n```\n\n### _.json ###\n\n```\nString -> {}\n{} -> String\n```\n\n文字列が与えられたらJSON.parse、それ以外ならJSON.stringifyする.\n\n```javascript\n_.json({a:1, b:[2, 3]}); //=> '{\"a\":1, \"b\":[2, 3]}'\n_.json('{\"a\": 1, \"b\": [2, 3]}', {a:1, b:[2, 3]});\n```\n\n### _.assoc ###\n\n```\n{} * String * a -> {}\n{} * String * a * String * b -> {}\n...\n```\n\nオブジェクトにプロパティを追加する\n\n```javascript\n_.assoc({a:1, b:2}, \"c\", 3, \"d\", 4, \"a\", 100); //=> {a:100, b:2, c:3, d:4}\n```\n\n\nFunction\n--------\n\n### _.apply ###\n\n```\nFunction a * [] -> a\nFunction a * [] * {} -> a\n```\n\n関数Fと配列Vを取り、`F.apply(null, V)`する.\n第三引数にコンテキストCが与えられた場合は、 `F.apply(C, V)`する.\n\n```javascript\n_.apply(function (a, b, c) { return [a,b,c]; },\n        [1,2,3]); //=> [1,2,3]\n```\n\n### _.flip ###\n\n```\n(a * b -> c) -> (b * a -> c)\n(a * b * c -> d) -> (b * a * c -> d)\n...\n```\n\n関数の第一引数と第二引数の位置を入れ替える.\n\n```javascript\n_.flip(_['-'])(10, 5); //=> -5\n```\n\n### _.flippar ###\n\n```\nFunction -> Function\nFunction * a -> Function\nFunction * a * b -> Function\n...\n```\n\nflipとpartialをひとまとめにしたもの.\n\n```javascript\nvar join_with_sharp = _.flippar(_.join, \"#\");\n\njoin_with_sharp([\"aaa\", \"bbb\", \"ccc\"]); //=> \"aaa#bbb#ccc\"\n```\n\n### _.pipe ###\n\n```\na * (a -> b) -> b\na * (a -> b) * (b -> c) -> c\n...\n```\n\nF#の`|>`, Clojureの`->>`\n\n```javascript\n_.pipe(\"hello, \",\n       _.flippar(_['+'], \"world!\"),\n       _.str.capitalize); //=> \"Hello, world!\"\n```\n\n### _.iff ###\n\n```\n(a -> Boolean) * (a -> b) * (a -> b) -> (a -> b)\n```\n\nifの関数版. 述語関数1つと関数2つをとり、関数を返す。\n\n```javascript\nf = _.iff(_.eq(5),\n          _['*'](2),\n          _.partial(_.identity, -1));\n\nf(8); //=> -1\nf(5); //=> 10\n```\n\n### _.optarg ###\n\n```\nNumber * Function -> Function\n```\n\n数値Nと関数Fを取り、関数Fへの引数のN+1番目以降を配列にしてFに渡す関数Gを返す。argumentsのスライシングを抽象化する。\n\n```javascript\nvar f = _.optarg(2, function (a, b, cs) {\n  return cs;\n});\n\nf(1, 2, 3, 4, 5, 6, 7); //=> [3, 4, 5, 6, 7]\n```\n\n### _.bin_multi ###\n\n```\n(a * a -> a) -> (a * a * a * ... -> a)\n```\n\n`a * a -> a`な二引数関数を無限に引数を取れる関数に変換する.\n\n```javascript\nvar add = _.bin_multi(function (a) { return a + b; });\n\nadd(1,2,3,4,5,6,7,8,9); //=> 45\n```\n\n### _.native_absent ###\n\n```\nString * Function -> Function\n```\n\nメソッド名Mと関数Fを取って、「オブジェクトOと引数Aを取って、オブジェクトOにメソッドMが定義されていれば引数Aにそれを適用し、そうでなければ関数FにオブジェクトOと引数Aを渡す関数」を返す.\n\n```javascript\nvar slice = _.native_absent(\"slice\", function (o, start, end) {\n  var arr = _.toArray(o);\n  return arr.slice(start, end);\n});\n```\n\n### _.auto_partial\n\n```\nNumber * Function -> Function\n```\n\n引数の数が数値Nより少なかったら関数Fに部分適用する。\n\n```javascript\n_.eq = _.auto_partial(2, function (a, b) {\n  return a === b;\n});\n_.reject([1,5,2,5,3,5], _.eq(5)); //=> [1,2,3]\n```\n\n\nString\n------\n\n### _.simple_template ###\n\n```\nString * {} -> String\n```\n\neval禁止などで_.templateが使えない時や、テンプレートにロジックがない場合に使いやすいテンプレーティング関数.\n\n```javascript\n_.simple_template(\"quick {{ color }} {{animal}} is {{color}}\",\n                  {color: \"brown\", animal: \"fox\"});\n\n//=> \"quick brown fox is brown\"\n```\n\nMethods\n-------\n\n### _.fn ###\n\n```\n{} * String -> Function\n```\n\nオブジェクトとメソッド名を取り、メソッドを関数にして返す.\n\n```\nvar toUpper = _.fn(String.prototype, \"toUpperCase\");\ntoUpper(\"hello\"); //=> \"HELLO\"\n```\n\nOperator\n--------\n\n演算子は関数合成や部分適用のときに扱い辛いので関数を提供する. 全て勝手に部分適用される。\n\n用意されている関数:\n\n```\n_[\"+\"], _[\"-\"], _[\"*\"], _[\"/\"], _[\"%\"],\n_.and, _.or, _.not,\n_.eq, _.neq, _.lt, _.gt, _.lte, _.gte,\n_.at\n```\n\n```javascript\n_[\"+\"](2,3); //=> 5\n_.bin_multi(_[\"+\"])(1,2,3,4,5); //=> 15\n_.map([1,2,3,4], _[\"*\"](2)); //=> [2,4,6,8]\n_.filter([1,2,0,4,1,3,1], _.lt(2)); //=> [4,3]\n\n_.bin_multi(_.at)({a: {b: {c: \"xxx\"}}}, \"a\", \"b\", \"c\"); //=> \"xxx\"\n```\n\n\nModule\n------\n\n```\n{} * Function -> {}\n{} * Function * Function -> {}\n...\n```\n\nモジュールを作る\n\n```javascript\nvar myModule = _.module(\n  {},\n\n  function hola () {\n    return \"Hola!\"\n  },\n\n  function hi () {\n    return \"Hi!\"\n  }\n);\n\nmyModule.hola(); //=> \"Hola!\"\n\nmodule(\n  myModule,\n\n  function hehe () { return \"hehe\";  }\n);\n\nmyModule.hehe();\n```\n\n\nLOG\n---\n\n### 2013/5/20\n\n+ 演算子のデフォルトでの多引数化はやめた。これは_.mapなどとの兼ね合い。\n\n```javascript\n//before\n_[\"+\"](1,2,3,4,5); //=> 15\n_.map([1,2,3], _.partial(_['+'], 5)); //=> [\"61,2,3\", \"81,2,3\", \"101,2,3\"]\n\n//now\n_[\"+\"](1,2,3,4,5); //=> 3\n_.bin_multi(_['+'])(1,2,3,4,5); /=> 15\n_.map([1,2,3], _.partial(_['+'], 5)); //=> [6,7,8]\n```\n\n+ 代わりに演算子はデフォルトで部分適用を可能にした。\n\n```javascript\n//before\n_.partial(_['+'], 4)(5); //=> 9\n\n//now (in addition to the old method)\n_['+'](4)(5); //=> 9\n_.bin_multi(_['+'])(1)(2,3,4,5); //=> 15\n```\n",
  "readmeFilename": "README.md",
  "_id": "underscore-fix@0.1.0",
  "description": "Underscore-fix ==============",
  "commit": "bcba258d6bbaeb5166a81d37ec3941c086e5989d",
  "repository": {
    "type": "git",
    "url": "git://github.com/ympbyc/underscore-fix.git"
  }
}